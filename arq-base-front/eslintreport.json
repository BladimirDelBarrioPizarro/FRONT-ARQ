[{"filePath":"/home/atmira/src/CESCE_v3/arquitectura/arq-base-front/src/communications-module/__test__/init.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'init' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'initParams' is assigned a value but never used.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":17}],"errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env jest */\nimport init from '../init'\nimport { exampleConfigPaths } from './example-config-paths'\n\njest.mock('axios', () => ({\n  request: (data) => data,\n  create: () => ({\n    request: (data) => data\n  })\n}))\n\nconst initParams = {\n  paths: exampleConfigPaths.paths,\n  host: 'midominio.com',\n  basepath: 'v1',\n  protocol: 'https',\n  timeout: 1000\n}\n\ndescribe('function: init', () => {\n  /* test('Result tiene una clave call', async () => {\n    const result = await init({\n      paths: exampleConfigPaths.paths\n    })\n    expect(result).toHaveProperty('call')\n  }) */\n  /*   test('Calcula correctamente el baseURL con los parametros que se le pasan', async () => {\n    const { call } = await init(initParams)\n    const result = await call({ url: 'ejemploAPI' })\n    // eslint-disable-next-line\n    expect(result['baseURL']).toBe('https://midominio.com/v1')\n  }) */\n  /*  test('El resultado tiene una clave \"api\"', async () => {\n    const { call } = await init(initParams)\n\n    expect(call).toHaveProperty('api')\n  })\n */\n  /*   test('El resultado tiene una clave \"api\" con una clave mascota y sus verbos', async () => {\n    const { call } = await init(initParams)\n\n    expect(call).toHaveProperty('api')\n    expect(call.api).toHaveProperty('mascota')\n    // eslint-disable-next-line\n    expect(call.api.mascota).toHaveProperty('get')\n    // eslint-disable-next-line\n    expect(call.api.mascota).toHaveProperty('post')\n  }) */\n})\n","usedDeprecatedRules":[{"ruleId":"handle-callback-err","replacedBy":[]},{"ruleId":"no-negated-in-lhs","replacedBy":["no-unsafe-negation"]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]}]